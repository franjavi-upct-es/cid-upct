---
title: "Trabajo de Investigación"
subtitle: "Sistemas de Lindenmayer y su aplicación a la representación de fractales geométricos planos"
author: "Francisco Javier Mercader Martínez"
format: 
    pdf:
        documentclass: article
        fig-width: 8
        fig-height: 10
        listings: true 
        toc-depth: 4
        toc: true
        toc-title: "Índice"
        linkcolor: "black"
        number-sections: true
        include-in-header: ../../custom-listings.tex
linestrectch: 1.5 
fontisize: 10pt
papersize: a4 
geometry: margin=1.5cm 
execute: 
    echo: false
---

\newpage

```{python}
#| include: false 
import numpy as np 
import matplotlib.pyplot as plt
import math
from matplotlib.patches import Polygon
plt.rcParams['text.usetex'] = True
```

# Resumen {.unnumbered}

La simulación con computadoras de diversos procesos físicos complejos en cualquier rama científica ha sido siempre un área de gran interés debido a su versatilidad, "economía" y posibilidad de reproducir experimentos cuya realización podría resultar costosa o hasta imposible en la vida real, es por eso por lo que muchos científicos han dedicado sus estudios a este campo.

Tal es el caso de Aristid Lindenmayer, que se hacía la siguiente pregunta: *¿de qué forma estará codificada la información que hace que una semilla prácticamente amorga llegue a desarrollarse como un árbol o una hierba de gran complejidad?* Pues tratando de responder a ello, fue como inventó los sistemas que llevan su apellido en su honor.

# Abstract {.unnumbered}

Computer simulation of various complex physical processes in any scientific branch has always been an area of great interest due to its versatility, "economy" and the possibility of reproducing experiments whose performance could be expensive or even impossible in real life that is why that many scientists have dedicated their studies to this field.

Such is the case of Aristid Lindenmayer, who asked himself the following question: *in what way will the information that makes a practically amorphous seed develop into a tree or grass of great structural complexity be encoded?* Well, trying to answer it, it was how he invented the systems that bear his surname in his honour.

# Introducción

## Contexto del trabajo y justificación

Este trabajo pertenece al área de las matemáticas, en particular nos vamos a centrar en los Sistemas de Lindenmayer o Sistemas-L y en sus aplicaciones. Puesto que la naturaleza recursiva de las reglas de los sistemas-L conduce a la auto semejanza y por tanto facilita la descripción de formas tipo fractales, nos proponemos generar diversos fractales geométricos en el plano mediante el uso del lenguaje de programación [Python](https://es.wikipedia.org/wiki/Python)

## Finalidad del proyecto

Explicar el término de fractal al públicos y mostrar de qué manera se pueden obtener a base del lenguaje de programación y también se describirán los sistemas-L para poder explicar las aplicaciones que tienen en la creación de fractales.

## Antecedentes

-   Un primer trabajo corresponde a una tesis elaborada por Alfonso Ortega de La Puente en el año 2000 que describe de forma detallada los sistemas de Lindenmayer y los fractales entre otros términos de los que no trataremos en este trabajo.

-   Un segundo trabajo realizado por Armando Cervantes Sandoval, Yolanda Rodríguez Pagaza y Luis L. Landois Palencia en el año 2002 cuya finalidad era demostrr qué son y cómo aplicar los sistemas-L a la modelación de formas vegetales donde se revisan aspectos como:

    1.  Lenguajes formales .
    2.  Tipos de sistemas de Lindenmayer.
    3.  Diferencias y semejanzas entre lenguajes formales y sistemas Lindenmayer.
    4.  Patrones de desarrollo en vegetales a nivel de disposición foliar, ramificación y tipo de inflorescencia.

## Fundamentos teóricos

La geometría ha experimentado lo que se puede considerar una revolución en las últimas tres décadas. La realidad no resulta ser geométricamente monstruosa. Esta sensación paradójica: *"la naturaleza nos rodea, la vemos, la tocamos, nos alimentamos de ella pero no podemos describirla formalmente porque no se ajusta a la geometría que somos capaces de entender"*, se ha mantenido desde Euclides hasta nuestros días. Y no solo eso. Puede identificarse las mismas propiedades en el comportamiento de muchos sistemas físicos, de hecho, los fractales son capaces de explicar la complejidad de la dinámica de muchos sistemas que estaban siendo estudiados y simulados en distintas disciplinas. Los fractales resultan tener un enorme poder expresivo para describir la complejidad.

Las relaciones entre sistemas-L y fractales han sido ampliamente estudiadas de una manera más bien sintomática. El innegable atractivo visual de las imágenes fractales generadas por ordenador hace frecuente encontrar multitud de programas que los generan y en ellos se suele añadir la posibilidad de describir fractales según Lindenmayer. El usuario ve que las gramáticas que han descrito son capaces de generar fractales. Realmente ve que una traducción gráfica de cada símbolo de las cadenas derivadas por las gramáticas que escribe representa una curva que recuerda poderosamente a su percepción de algunos fractales. A medida que consigue cadenas más largas, la interpretación gráfica le presenta una aproximación mejor que la curva fractal. Como se ve que es la misma curva se sabe que el sistema de Lindenmayer representa un fractal.

### Fractales

En los últimos años del siglo XIX científicos como Cantor, von Koch, Peano y Sierpiński estudiaron algunas curvas con propiedades que las hacían ser consideradas como monstruosas. Las peculiaridades de estos objetos extraños han sido observadas en otros procesos. El análisis de estos fenómenos ha descubierto las características que se han vinculado finalmente con el concepto de fractal. El término fue propuesto por el matemático Benoît Mandelbrot en 1975 y deriva del latín *fractus*, que significa quebrado o fracturado. Muchas estructuras naturales son de tipo fractal.

#### Tipos de fractales

Es importante precisar qué tipos de fractales existen, clasificarlos de acuerdo con sus atributos y características, y determinar cuáles son más adecuados para su utilización en esta disciplina. Sin embargo, es conveniente primero recurrir a una clase:

-   Determinísticos: que a su vez pueden ser **algebraicos** o **geométricos**.

-   No determinísticos: también denominados **estocásticos**.

Esta clasificación hace referencia al procedimiento seguido para su generación:

-   En los determinísticos el proceso generativo queda pautado de antemano mediante una fórmula algebraica o algoritmo geométrico de reemplazo e iteración.

-   En los no determinísticos, los procesos generativos están afectados por parámetros accidentales o aleatorios que permiten emular objetos fractales de apariencia más natural.

**\underline{Fractales determinísticos}**

Los determinados algebraicos, creados mediante procesos algebraicos no lineales en espacios $n$-dimensionales, conforman la mayor clase de fractales. Los procesos más estudiados son los que responde a generativos bidimensionales, interpretando el proceso iterativo no lineal como una sistema dinámico discreto, por lo tanto es común referirse a estos fractales con terminología de la Teoría de Sistemas Dinámicos (*los sistemas dinámicos están definidos como cualquier sistema que exhibe cambios en el tiempo*).

```{python}
#| fig-align: center
#| fig-cap: "Tres áreas de atracción del mismo proceso iterativo"
#| width: 80%
import numpy as np
import matplotlib.pyplot as plt

def mandelbrot_array(x_min, x_max, y_min, y_max, 
                     width=800, height=600, max_iterations=100):
    """
    Calcula el número de iteraciones antes de divergir (o 0 si no diverge
    antes de max_iterations) para cada punto en la región de Mandelbrot
    especificada por [x_min, x_max] x [y_min, y_max].
    
    Retorna:
    --------
    divergence_time: np.array (2D)
        Matriz con el número de iteraciones que cada punto tardó en divergir.
    extent: tuple
        Tupla con (x_min, x_max, y_min, y_max) para poder usar en imshow.
    """
    # Generamos la malla de puntos complejos
    x = np.linspace(x_min, x_max, width)
    y = np.linspace(y_min, y_max, height)
    X, Y = np.meshgrid(x, y)
    C = X + 1j*Y

    # Inicializamos Z y la matriz de iteraciones
    Z = np.zeros_like(C, dtype=complex)
    divergence_time = np.zeros(C.shape, dtype=int)

    # Máscara para saber qué puntos no han divergido todavía
    mask = np.ones(C.shape, dtype=bool)

    for i in range(max_iterations):
        # Sólo iteramos en los puntos que no han divergido
        Z[mask] = Z[mask]**2 + C[mask]
        # Marcamos los que ahora superan |Z| > 2
        diverged = np.abs(Z) > 2
        divergence_time[mask & diverged] = i
        # Actualizamos la máscara para ignorar los que ya divergieron
        mask[mask & diverged] = False

    return divergence_time, (x_min, x_max, y_min, y_max)


# Crear la figura con 1 fila y 3 columnas
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

# 1) Vista general del Conjunto de Mandelbrot
dt1, ext1 = mandelbrot_array(-2.0, 1.0, -1.2, 1.2, 
                             width=800, height=600, max_iterations=100)
im1 = axes[0].imshow(dt1, extent=(ext1[0], ext1[1], ext1[2], ext1[3]),
                     origin='lower', cmap='hot')

# 2) Primer zoom
dt2, ext2 = mandelbrot_array(-0.8, -0.7, 0.05, 0.15,
                             width=800, height=600, max_iterations=200)
im2 = axes[1].imshow(dt2, extent=(ext2[0], ext2[1], ext2[2], ext2[3]),
                     origin='lower', cmap='hot')

# 3) Segundo zoom (más profundo)
dt3, ext3 = mandelbrot_array(-0.75, -0.72, 0.09, 0.12,
                             width=800, height=600, max_iterations=400)
im3 = axes[2].imshow(dt3, extent=(ext3[0], ext3[1], ext3[2], ext3[3]),
                     origin='lower', cmap='hot')

plt.tight_layout()
plt.show()
```

Los fractales determinísticos geométricos, son los que siguen una o más reglas de transformación de una figura derivada de la geometría estándar, permite obtener copias de ella misma, reducidas de tamaño.

```{python}
#| fig-align: 'center'
#| fig-cap: "Ejemplo de iniciador y generador pentagonal en 6 iteraciones"
#| width: 80%
def draw_pentagon(ax, x, y, r, direction, pencolor):
    """
    Dibuja un pentágono regular con centro (x,y), radio r y orientación inicial.
    
    La rutina simula el comportamiento original de Turtle:
      1. Se calcula el primer vértice desplazándose r unidades en la dirección dada.
      2. Se rota 126° para establecer la dirección inicial de dibujo.
      3. Se calculan los 5 lados con longitud L = 2*r*sin(36°) 
         y se giran 72° tras cada lado.
    """
    L = 2 * r * math.sin(math.radians(36))
    # Punto de partida en la circunferencia con ángulo 'direction'
    dir_rad = math.radians(direction)
    p0 = (x + r * math.cos(dir_rad), y + r * math.sin(dir_rad))
    vertices = [p0]
    
    # Se rota 126° para la dirección inicial de la arista
    current_angle = math.radians(direction + 126)
    for _ in range(5):
        prev_x, prev_y = vertices[-1]
        new_point = (prev_x + L * math.cos(current_angle),
                     prev_y + L * math.sin(current_angle))
        vertices.append(new_point)
        current_angle += math.radians(72)
        
    # Se crea el polígono usando los 5 vértices (se omite el último punto extra)
    pentagon_patch = Polygon(vertices[:-1], closed=True, edgecolor=pencolor, facecolor='none')
    ax.add_patch(pentagon_patch)

def pentaflake(ax, x, y, r, direction, n, pencolor='dark cyan'):
    """
    Dibuja el fractal pentaflake de forma recursiva.
    
    Si n == 0, se dibuja un pentágono; en caso contrario, se calcula un tamaño r2
    para las figuras subordinadas y se invoca la función recursivamente para 5 
    posiciones alrededor del centro y una figura central.
    """
    if n == 0:
        draw_pentagon(ax, x, y, r, direction, pencolor)
        return

    r2 = r / (1 + 2 * math.cos(math.radians(36)))
    d = 2 * r2 * math.cos(math.radians(36))
    current_direction = direction
    # Cinco pentágonos situados alrededor del central
    for _ in range(5):
        x2 = x + d * math.cos(math.radians(current_direction))
        y2 = y + d * math.sin(math.radians(current_direction))
        pentaflake(ax, x2, y2, r2, current_direction, n - 1, pencolor)
        current_direction += 72
    # Pentágono central (con color 'dark green')
    pentaflake(ax, x, y, r2, current_direction + 180, n - 1, 'k')

# Crear una grilla de 2 filas x 3 columnas para mostrar 5 subplots.
fig, axes = plt.subplots(2, 3, figsize=(6, 4))
axes = axes.flatten()

# Dibujar las 5 primeras iteraciones en cada uno de los subplots
for i in range(6):
    ax = axes[i]
    ax.set_xlim(-1000, 1000)
    ax.set_ylim(-1000, 1000)
    ax.axis("off")
    pentaflake(ax, 0, 0, 1000, 90, i, "k")
plt.gcf().set_facecolor('none')
plt.show()
```

```{python} 
def generar_fractal_lsystem(reglas, inicio, angulo, iteraciones, escala_color=1, nombre=""):
    punto_inicial = np.array([0, 0])
    angulo_actual = 0
    fractal = []

    def aplicar_regla(cadena):
        return "".join([reglas.get(c, c) for c in cadena])

    def matriz_rotacion(angulo):
        rad = np.radians(angulo)
        return np.array([
            [np.cos(rad), -np.sin(rad)],
            [np.sin(rad),  np.cos(rad)]
        ])

    # Aplicar reglas de producción
    palabra = inicio
    for _ in range(iteraciones):
        palabra = aplicar_regla(palabra)

    # Procesar la cadena
    for i, letra in enumerate(palabra):
        if letra == "+":
            angulo_actual += angulo
        elif letra == "-":
            angulo_actual -= angulo
        elif letra == "F":
            rotacion = matriz_rotacion(angulo_actual)
            vector = np.dot(rotacion, np.array([0, 1]))
            punto_extremo = punto_inicial + vector
            fractal.append((punto_inicial.copy(), punto_extremo.copy()))
            punto_inicial = punto_extremo

    # Dibujar
    fig, ax = plt.subplots(figsize=(5, 5))
    for i, (p1, p2) in enumerate(fractal):
        p1_x, p1_y = p1
        p2_x, p2_y = p2
        ax.plot([p1_x, p2_x], [p1_y, p2_y], linewidth=1, color=plt.cm.autumn(i / (len(fractal) * escala_color)))

    ax.set_aspect('equal')
    ax.axis("off")

    # Mostrar nombre del fractal
    if nombre:
        fig.text(0.5, 0.02, nombre, ha='center', fontsize=12)

    plt.tight_layout()
    plt.show()

fractales_definidos = {
    "Fractal1": {
        "reglas": {"F": "-F+F-F-F+F+FF-F+F+FF+F-F-FF+FF-FF+F+F-FF-F-F+FF-F-F+F+F-F+"},
        "inicio": "F+F+F+F",
        "angulo": 90,
        "iteraciones": 2
    },
    "Fractal2": {
        "reglas": {"F": "F-F+F+F-F"},
        "inicio": "F-F-F-F",
        "angulo": 90,
        "iteraciones": 3
    },
    "Fractal3": {
        "reglas": {"X": "YF+XF+Y", "Y": "XF-YF-X"},
        "inicio": "YF",
        "angulo": 60,
        "iteraciones": 5
    },
    "Fractal4": {
        "reglas": {"L": "+RF-LFL-FR+", "R": "-LF+RFR+FL-"},
        "inicio": "L",
        "angulo": 90,
        "iteraciones": 4
    },
    "Fractal5": {
        "reglas": {"X": "XFYFX+F+YFXFY-F-XFYFX", "Y": "YFXFY-F-XFYFX+F+YFXFY"},
        "inicio": "X",
        "angulo": 90,
        "iteraciones": 3
    },
    "Fractal6": {
        "reglas": {"F": "F+F–F+F"},
        "inicio": "F–F–F",
        "angulo": 60,
        "iteraciones": 3
    },
    "Fractal7": {
        "reglas": {"F": "F+F-F-F-F+F+F+F-F"},
        "inicio": "F",
        "angulo": 90,
        "iteraciones": 2
    },
    "Fractal8": {
        "reglas": {"X": "X+YF++YF-FX–FXFX-YF+", "Y": "-FX+YFYF++YF+FX–FX-Y"},
        "inicio": "FX",
        "angulo": 60,
        "iteraciones": 3
    },
    "Fractal9": {
        "reglas": {"F": "F-F+F+FFF-F-F+F"},
        "inicio": "F+F+F+F",
        "angulo": 90,
        "iteraciones": 2
    },
    "Fractal10": {
        "reglas": {"X": "XF-F+F-XF+F+XF-F+F-X"},
        "inicio": "F+XF+F+XF",
        "angulo": 90,
        "iteraciones": 3
    },
    "Fractal11": {
        "reglas": {"F": "FF", "X": "–FXF++FXF++FXF–"},
        "inicio": "FXF–FF–FF",
        "angulo": 60,
        "iteraciones": 4
    },
    "Fractal12": {
        "reglas": {"A": "A-F-FA+F+FA+F+FA+F+FA-F-FA-F-FA-F-FA+F+FA"},
        "inicio": "+FA",
        "angulo": 45,
        "iteraciones": 3
    },
    "Fractal13": {
        "reglas": {"F": "FF++F++F+F++F-F"},
        "inicio": "F",
        "angulo": 60,
        "iteraciones": 5
    },
    "Fractal14": {
        "reglas": {"F": "F+F–F+F"},
        "inicio": "F",
        "angulo": 80,
        "iteraciones": 6
    },
    "Fractal15": {
        "reglas": {"L": "L+R++R-L–LL-R+", "R": "-L+RR++R+L–L-R"},
        "inicio": "L",
        "angulo": 60,
        "iteraciones": 5
    },
    "Fractal16": {
        "reglas": {"L": "R+L+R", "R": "L-R-L"},
        "inicio": "R",
        "angulo": 60,
        "iteraciones": 7
    }
}


def mostrar_fractal(nombre):
    if nombre in fractales_definidos:
        params = fractales_definidos[nombre]
        generar_fractal_lsystem(**params, nombre=nombre)
    else:
        print(f"No se encontró un fractal con el nombre: {nombre}")
```

```{python}
#| fig-align: center
#| layout-ncol: 3
for i, (k, v) in enumerate(fractales_definidos.items()):
  if i >= 6:
    break
  mostrar_fractal(k)
```

```{python}
#| fig-align: center
#| layout-ncol: 3
for i, (k, v) in enumerate(fractales_definidos.items()):
  if 6 < i <= 12:
    mostrar_fractal(k)
```

```{python}
#| fig-align: center
#| layout-ncol: 3
for i, (k, v) in enumerate(fractales_definidos.items()):
  if 6 > 12:
    mostrar_fractal(k)
```
