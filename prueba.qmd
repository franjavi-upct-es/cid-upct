---
title: "Prueba"
author: "Francisco Javier Mercader"
format: 
    pdf: 
        documentclass: article
        toc: true
        toc-depth: 4
        toc-title: "Índice"
        number-sections: true
        highlight-style: tango
        header-includes: |
            \everymath{\displaystyle}
            \usepackage{graphics}
papersize: a4
geometry: margin=1.5cm
editor_options: 
  chunk_output_type: console
---
```{r include=FALSE}
library(reticulate)
use_condaenv("optim-2", conda="C:/ProgramData/anaconda3/Scripts/conda.exe", required = TRUE)
py_config()
```
\newpage

# Prueba título

## Prueba título 2

### Prueba título 3

#### Prueba título 4

```{python}
for i in range(10):
    print(i)
```

::: callout-important
## Prueba

Hola
:::

$x^2-2=4\longrightarrow x^2=6\longrightarrow x=\sqrt{6}$

```{python, echo = FALSE, fig.align = "center", fig.scale=0.5}
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Parámetros
alpha = 0.10
alpha_2 = alpha / 2
z_crit = 1.645  # valor z tal que P(Z > 1.645) = 0.05 en la Normal estándar

# Generamos un rango de valores para la variable 'z'
x = np.linspace(-3, 3, 500)
y = norm.pdf(x)  # f(z) = pdf de la Normal(0,1)

# Creamos la figura
plt.figure(figsize=(8, 5))

# Dibujamos la curva de densidad
plt.plot(x, y, color='blue', label='Densidad $N(0,1)$')

# Sombreamos las colas:
#   - Cola izquierda: z < -z_crit
#   - Cola derecha: z > +z_crit
x_left = np.linspace(-3, -z_crit, 200)
y_left = norm.pdf(x_left)
plt.fill_between(x_left, y_left, color='cyan', alpha=0.5)

x_right = np.linspace(z_crit, 3, 200)
y_right = norm.pdf(x_right)
plt.fill_between(x_right, y_right, color='cyan', alpha=0.5)

# Trazamos líneas verticales punteadas en z = ±z_crit
plt.vlines([-z_crit, z_crit], 0, 0.1, color='blue')
plt.axhline(y=0, color="black", linewidth=1.5)

# Etiquetas para z_crit
plt.text(-z_crit, -0.01, r"$-z_{0.95}=-1.645$", 
         ha='center', va='top', fontsize=10, color='blue')
plt.text(z_crit, -0.01, r"$z_{0.95}=1.645$", 
         ha='center', va='top', fontsize=10, color='blue')

# Agregamos un texto indicando alpha/2 en cada cola
# (opcionalmente, con flechas o simplemente un texto cercano)
plt.text(-2.7, 0.06, r"$\frac{\alpha}{2}=0.05$", 
         ha='center', va='bottom', fontsize=9, color='blue')
plt.text(2.7, 0.06, r"$\frac{\alpha}{2}=0.05$", 
         ha='center', va='bottom', fontsize=9, color='blue')

# Etiqueta central que muestra 1 - alpha
plt.text(0, 0.25, r"$1 - \alpha = 0.90$", color="blue", 
         ha='center', va='bottom', fontsize=11)

# Etiquetamos la función
plt.text(0, 0.42, r"$\mathcal{N}(0,1)$",
         ha='center', va='bottom', fontsize=11, color='blue')

# Ajustes finales del gráfico
plt.ylim(0, 0.45)
plt.xlim(-3, 3)
plt.grid(False)
plt.xticks([])  # Quitar valores del eje x
plt.yticks([])  # Quitar valores del eje y
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.gca().set_facecolor("none")
plt.gca().patch.set_facecolor("none")
plt.gcf().patch.set_facecolor("none")
plt.show()
```

```{python, echo = FALSE}
for i in range(10):
    print(i)
```

```{r}
#| fig-align: 'center'
#| warning: false
library(bayesrules)
library(tidyverse)
plot_beta_binomial(
    alpha = 1,
    beta = 1,
    y = 8,
    n = 20,
    prior = TRUE,
    likelihood = FALSE,
    posterior = TRUE
)
```
