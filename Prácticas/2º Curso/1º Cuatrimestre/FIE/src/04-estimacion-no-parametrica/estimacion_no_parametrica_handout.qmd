---
title: "Estimación no paramétrica"
author:
  - name: Félix Belzunce
    affiliations: Universidad de Murcia
  - name:  María del Carmen Bueso, Pilar Sanmartín
    affiliations: Universidad Politécnica de Cartagena
format: html
editor: visual
title-block-banner: true
self-contained: true
---

# Introducción

El objetivo de esta práctica es presentar en `R` las herramientas estadísticas para la estimación de la función de distribución y la función de densidad. Como hemos comentado en clase, la estimación de la función puntual de probabilidad se realiza a través de las correspondientes proporciones muestrales. Recordamos que la estimación de la función de distribución se realiza a través de la función de distribución empírica y la estimación de la función de densidad a través de los estimadores tipo núcleo.

# Función de distribución empírica

Dada una variable aleatoria $X$ con función de distribución $F(x)=P(X\le x)$, tenemos que el estimador de $F$ es la *función de distribución empírica* que viene dada por $$
F_n(x)=\frac{\sum_{i=1}^n I_{(-\infty,x]}(X_i)}{n} \text{ para todo }x\in \mathbb R,
$$ dada un m.a.s., $X_1,\ldots,X_n$, de $X$.

Veamos como está implementado su cálculo en `R`. La función que utilizaremos es la función `ecdf`.

```{r}
# Completar aquí
library(tidyverse)
set.seed(314159)
sample <- rnorm(100, 5, 1)
Fn <- ecdf(sample)
tibble(
    x = seq(min(sample), max(sample), by = 0.01),
    fde = Fn(x)
) %>%
  ggplot(aes(x = x, y = fde)) +
  geom_line() +
  geom_function(fun = function(x) pnorm(x, 5, 1), colour = "blue")
# Fin Completar aquí
```

Podemos ver en este caso la buena aproximación de la distribución teórica a través de la función de distribución empírica.

# Estimación tipo núcleo

Siguiendo la notación anterior, en este caso se trata de estimar la función de densidad, $f(x)=F'(x)$, de la variable $X$.

Los estimadores de la función de densidad vistos en clase se conocen como *estimadores tipo núcleo* y su expresión general viene dada por $$
\hat f_n(x)=\frac{1}{2nh_n}\sum_{i=1}^n K\left(\frac{x-X_i}{h_n}\right), 
$$ donde $K$ es una función núcleo y $h_n$ es lo que se conoce como el ancho de banda.

Veamos como obtener este estimador con `R` para diferentes núcleos y diferentes anchos de banda. La función que nos permite obtener la estimación tipo núcleo es `density`.

Recordamos que los núcleos vistos en teoría:

-   **Núcleo rectangular:** $K$ es la función de densidad de una distribución uniforme.

-   **Núcleo normal:** $K$ es la función de densidad de una distribución normal estándar. Suele ser el núcleo que más se utiliza.

-   **Núcleo de Epanechnikov:** $K(z)=(1-z^2)I_{(-1,1)}$. Se considera que es el núcleo más eficiente.

donde estos dos últimos son los más utilizados.

Veamos un ejemplo con cada núcleo.

-   Núcleo rectangular:

```{r }
# Completar aquí
estimacion <- density(
  x = sample,
  kernel = "rectangular",
  bw = "nrd"
)

tibble(x = estimacion$x, y = estimacion$y) %>%
  ggplot(aes(x = x, y = y)) +
  geom_line() +
  geom_function(fun = function(x) dnorm(x, 5, 1), colour = "blue")
# Fin Completar aquí
```

-   Núcleo normal:

```{r }
# Completar aquí
estimacion <- density(
  x = sample,
  kernel = "gaussian",
  bw = "nrd"
)

tibble(x = estimacion$x, y = estimacion$y) %>%
  ggplot(aes(x = x, y = y)) +
  geom_line() +
  geom_function(fun = function(x) dnorm(x, 5, 1), colour = "blue")
# Fin Completar aquí
```

-   Para el caso del núcleo de Epanechnikov tendríamos:

```{r }
# Completar aquí
estimacion <- density(
  x = sample,
  kernel = "epanechnikov",
  bw = "nrd"
)
tibble(x = estimacion$x, y = estimacion$y) %>%
  ggplot(aes(x = x, y = y)) +
  geom_line() +
  geom_function(fun = function(x) dnorm(x, 5, 1), colour = "blue")
# Fin Completar aquí
```

Como vemos, sobre todo en los dos tipos últimos casos, hay una aproximación bastante buena entre el valor real y la aproximación mediante el estimador tipo núcleo. Nos vamos a centrar en el estudio del núcleo normal y el de Epanechnikov.

La elección del ancho de banda se basa en la fórmula general: $$
h_n=\left( \frac{R(K)}{\mu_2^2(K)R(f'')n} \right)^{\frac{1}{5}},
$$ donde los valores $R(K)$ y $\mu_2(K)$ dependen del núcleo $K$ y $R(f'')$ depende de la función de densidad de la variable (ver los detalles en los apuntes del tema). Esto último presenta un problema ya que el término $R(f'')$ depende de la función de densidad que es desconocida y por tanto no se pude calcular su valor exacto.

Bajo ciertas condiciones, variable con distribución normal y núcleo normal, la expresión anterior queda como $$
\hat h_{n,RP}=\left( \frac{4}{3n}\right)^{1/5}S,
$$ y se conoce como "regla del pulgar". Es el valor usado en los ejemplos anteriores, y se especifica en el argumento `bw` como `"nrd"`.

La forma más complicada de evaluar es dando una estimación no paramétrica de $R(f'')$. La metodología va más allá de los contenidos de esta asignatura y no veremos los detalles, solo indicar que podemos seleccionarla en el argumento `bw` como `"SJ"`.

Vamos a reproducir las gráficas de antes con esta elección del ancho de banda.

Caso con núcleo normal:

```{r }
# Completar aquí
estimacion <- density(
  x = sample,
  kernel = "gaussian",
  bw = "SJ"
)
tibble(x = estimacion$x, y = estimacion$y) %>%
  ggplot(aes(x = x, y = y)) +
  geom_line() +
  geom_function(fun = function(x) dnorm(x, 5, 1), colour = "blue")
# Fin Completar aquí
```

Caso con núcleo Epanechnivok:

```{r }
# Completar aquí
 estimacion <- density(
  x = sample,
  kernel = "epanechnikov",
  bw = "SJ"
)
tibble(x = estimacion$x, y = estimacion$y) %>%
  ggplot(aes(x = x, y = y)) +
  geom_line() +
  geom_function(fun = function(x) dnorm(x, 5, 1), colour = "blue")
# Fin Completar aquí
```

# Ejercicio

Vamos a analizar datos del contexto de empresas de seguros. Para ello, vamos a considerar los datos que aparecen en el fichero `LOSSDATA.txt` donde tenemos 1500 observaciones aleatorias de dos variables que se corresponden con las importe de clientes junto con los gastos de cada una de esas importe en términos de abogados e investigación de la reclamación (ALAE). Tenemos un marco de datos con cuatro columnas, de las que solo nos vamos a ocupar de las dos primeras. La primera, donde están los importes de las importe y la segunda, donde están los valores de ALAE.

Obtener los gráficos de la función de distribución empírica de cada variable y superponerla con la correspondiente gráfica de una la distribución normal con medias y varianzas las estimadas a partir de los datos. A partir de las gráficas anteriores comentar si parece razonable considerar que los datos provienen de una distribución normal.

```{r }
# Completar aquí
library(ggplot2)
library(tibble)
library(dplyr)

# Leer los datos
datos <- read.table("../../data/LOSSDATA.txt", header = TRUE)

# Extraer las dos primeras columnas
importe <- datos[[1]]
alae <- datos[[2]]

# Calcular medias y desviaciones estándar
media_importe <- mean(importe)
sd_importe <- sd(importe)
media_alae <- mean(alae)
sd_alae <- sd(alae)

# Graficar la función de distribución empírica para las importe
ggplot(data = tibble(x = sort(importe)), aes(x = x)) +
  stat_ecdf(geom = "step", color = "red") +
  stat_function(fun = pnorm, args = list(mean = media_importe, sd = sd_importe),
                color = "blue") + 
  labs(title = "Función de distribución empírica de la variable Importe",
      x = "x", y = "y")

# Graficar la función de distribución empírica para ALAE
ggplot(data = tibble(x = sort(alae)), aes(x = x)) +
  stat_ecdf(geom = "step", color = "red") +
  stat_function(fun = pnorm, args = list(mean = media_alae, sd = sd_alae),
                color = "blue") +
  labs(title = "Función de distribución empírica de la variable ALAE",
       x = "x", y = "y")
# Fin Completar aquí
```

Obtener la estimaciones tipo núcleo de la función de densidad de las variables anteriores, utilizando los núcleos normal y Epanechnikov. Comenta la forma que se obtiene de la función de densidad en cada caso.

```{r}
# Completar aquí
# Estimación de la densidad de importe con núcleo normal
dens_importe_normal <- density(importe, kernel = "gaussian")
# Estimación de la densidad de importe con núcleo Epanechnikov
dens_importe_epanechnikov <- density(importe, kernel = "epanechnikov")

# Grafica densidades para importe
ggplot() +
  geom_line(aes(x = dens_importe_normal$x, y = dens_importe_normal$y), color = "blue") +
  geom_line(aes(x = dens_importe_epanechnikov$x, y = dens_importe_epanechnikov$y), color = "red") +
  labs(title = "Estimación de la Densidad - importe",
       x = "Importes de importe", y = "Densidad") +
  scale_color_manual(values = c("Normal" = "blue", "Epanechnikov" = "red"))

# Estimación de la densidad de ALAE con núcleo normal
dens_alae_normal <- density(alae, kernel = "gaussian")
# Estimación de la densidad de ALAE con núcleo Epanechnikov
dens_alae_epanechnikov <- density(alae, kernel = "epanechnikov")

# Graficar densidades para ALAE
ggplot() +
  geom_line(aes(x = dens_alae_normal$x, y = dens_alae_normal$y), color = "blue") +
  geom_line(aes(x = dens_alae_epanechnikov$x, y = dens_alae_epanechnikov$y), color = "red") +
  labs(title = "Estimación de la Densidad - ALAE",
       x = "Valores de ALAE", y = "Densidad") +
  scale_color_manual(values = c("Núcleo Normal" = "blue", "Núcleo Epanechnikov" = "red"))
# Fin Completar aquí
```

Realiza el mismo análisis pero con los datos transformados por el logaritmo neperiano.

```{r}
# Completar aquí
# Transformación logaritmica de las variables
log_importe <- log(importe)
log_alae <- log(alae)

Fn_importe <- ecdf(log_importe)
tibble(
    x = seq(min(log_importe), max(log_importe), by = 0.01),
    fde = Fn_importe(x)
) %>%
  ggplot(aes(x = x, y = fde)) +
  geom_line() +
  geom_function(fun = function(x) pnorm(x, 5, 1), colour = "blue")

Fn_alae <- ecdf(log_alae)
tibble(
    x = seq(min(log_alae), max(log_alae), by = 0.01),
    fde = Fn_alae(x)
) %>%
  ggplot(aes(x = x, y = fde)) +
  geom_line() +
  geom_function(fun = function(x) pnorm(x, 5, 1), colour = "blue")

# Estimación de la densidad de log_importe con núcleo normal
dens_log_importe_normal <- density(log_importe, kernel = "gaussian")
# Estimación de la densidad de log_importe con núcleo Epanechnikov
dens_log_importe_epanechnikov <- density(log_importe, kernel = "epanechnikov")

# Graficar densidades para log_importe
ggplot() +
  geom_line(aes(x = dens_log_importe_normal$x, y = dens_log_importe_normal$y), color = "blue") +
  geom_line(aes(x = dens_log_importe_epanechnikov$x, y = dens_log_importe_epanechnikov$y), color = "red") +
  labs(title = "Estimación de la Densidad - Log(Importe)",
       x = "Log(Importe)", y = "Densidad") +
  scale_color_manual(values = c("Núcleo Normal" = "blue", "Núcleo Epanechnikov" = "red"))

# Estimación de la densidad de log_alae con núcleo normal
dens_log_alae_normal <- density(log_alae, kernel = "gaussian")
# Estimación de la densidad de log_alae con núcleo Epanechnikov
dens_log_alae_epanechnikov <- density(log_alae, kernel = "epanechnikov")

# Graficar densidades para log_alae
ggplot() +
  geom_line(aes(x = dens_log_alae_normal$x, y = dens_log_alae_normal$y), color = "blue") +
  geom_line(aes(x = dens_log_alae_epanechnikov$x, y = dens_log_alae_epanechnikov$y), color = "red") +
  labs(title = "Estimación de la Densidad - Log(ALAE)",
       x = "Log(Valores de ALAE)", y = "Densidad") +
  scale_color_manual(values = c("Núcleo Normal" = "blue", "Núcleo Epanechnikov" = "red"))
# Fin Completar aquí
```
