---
title: "bootstrap"
author:
  - name: Félix Belzunce
    affiliations: Universidad de Murcia
  - name:  María del Carmen Bueso, Pilar Sanmartín
    affiliations: Universidad Politécnica de Cartagena
format: html
editor: visual
title-block-banner: true
self-contained: true
---

## El conjunto de datos

Esta práctica se inspira de un [post](https://medium.com/@junaidsqazi/a41-bootstrapping-and-confidence-interval-behind-the-scene-9eb349dc8926) de Junaid Qazi. Usa un conjunto de datos asociados al videojuego Starcraft, un videojuego de estrategia en tiempo real de ciencia ficción militar, desarrollado por Blizzard Entertainment, donde los jugadores controlan distintas razas alienígenas o humanos en batallas tácticas intergalácticas.

![Starcraft](starcraft.png)

Disponemos de un conjunto de datos de APM, que significa "Acciones Por Minuto", es una medida utilizada en videojuegos, especialmente en los de estrategia en tiempo real, para indicar el número de acciones que un jugador puede realizar en un minuto, como clics y comandos del teclado. Refleja la rapidez y eficiencia con la que un jugador puede manejar múltiples tareas y tomar decisiones en el juego.

Después de descargar del aula virtual el fichero `bootstrapping.csv` en la carpeta `data` de vuestra carpeta de prácticas, y haber examinado su estructura, cargar los datos en un tibble llamado `starcraft`.

```{r}
#| warning: false
# Completar aquí

library(tibble)
library(readr)
library(tidyverse)

starcraft <- read_csv('../../data/bootstrapping.csv', skip = 2)

# Fin Completar aquí
starcraft
```

## Primera exploración

-   Obtener mínimo, máximo, primer y tercer cuartil, mediana y media.

```{r}
# Completar aquí
# Obtener estadísticos descriptivos básicos
summary_stats <- summary(starcraft)

summary_stats
# Fin Completar aquí
```

-   Hay datos faltantes en el conjunto? Cuántos datos hay en total
-   Representar un resumen del conjunto con un "violin plot" al que añadáis los valores del conjunto. Consejo: como sólo tenemos una columna en el tibble, en `aes`, pasamos `x = ""`. En la salida, también se ha añadido un boxplot.

```{r}
#| warning: false
# Completar aquí
library(ggplot2)

# Verificar cuantos datos faltantes hay en el conjunto
datos_faltantes <- sum(is.na(starcraft))

# Contar el total de datos
total_datos <- nrow(starcraft)

cat("Datos faltantes:", datos_faltantes, "\n")
cat("Total de datos:", total_datos, "\n")

# Crear un violin plot con boxplot superpuesto# Completar aquí
starcraft |> 
  ggplot(aes(x = "", y = apm)) + 
  geom_violin(fill = "lightblue") + 
  geom_jitter(fill = 'orange') + 
  geom_boxplot(alpha = 0.2, width = 0.2, color = 'navy', lwd = 1.1)
#Fin Completar aquí
```

Constatamos que la distribución de los valores es asimétrica. Lo que también se puede apreciar con la diferencia entre media y mediana: la mediana se situa más a la izquierda porque es donde se concentran los datos.

Podemos también representar un histograma, por ejemplo con 50 clases.

```{r}
# Completar aquí
# Crear un histograma con 50 clases
ggplot(starcraft, aes(x = apm)) +
  geom_histogram(
    bins = 50, # Definir el número de clases
    fill = "skyblue",
    alpha = 0.7
  ) +
  labs(x = "apm", y = "count")


#Fin Completar aquí
```

::: callout-note
## Nuestro objetivo:

Queremos estimar, a partir de esta muestra, la mediana de apm de los jugadores de Starcraft en el mundo.
:::

## Estimación de la mediana

Ya proporcionamos en el apartado anterior una estimación de la mediana de la población como la mediana de la muestra. Vamos ahora a:

-   estimar el error estándar del estimador proporcionado usando 1000 muestras bootstrap.
-   construir un intervalo de confianza al 90% basado en percentiles bootstrap.

### Simulación de 1000 muestras bootstrap

-   Construir una lista de 1000 muestras bootstrap asociado a la muestra original de apms.

```{r}

set.seed(314159)
# Completar aquí
# Número de muestras bootstrap
n_muestras <- 1000

# Construir una lista de 1000 muestras bootstrap
lista_muestras_bootstrap <- lapply(1:n_muestras, function(x) {
  sample(starcraft$apm, size = length(starcraft), replace = TRUE)
})

# Fin Completar aquí
head(lista_muestras_bootstrap[[1]])
```

### Estimación del error estándar de la mediana muestral

-   Construir un vector `medianas_bootstrap` que contenga las medianas de las muestras bootstrap que hemos simulado

```{r}
# Completar aquí
medianas_bootstrap <- sapply(lista_muestras_bootstrap, median)

# Fin Completar aquí
head(medianas_bootstrap)
```

-   Deducid una estimación del error estándar asociado a la mediana muestral.

```{r}
# Completar aquí
# Calcular el error estándar de la mediana muestral
se_mediana <- sd(medianas_bootstrap)

# Fin Completar aquí
str_glue("El error estándar estimado de la mediana muestral es: {se_mediana}")
```

-   Deducid un intervalo de confianza al 90% para la mediana poblacional, usando una aproximación normal para la distribución muestral de la mediana muestral.

```{r}
# Completar aquí
library(stringr)

# Calcular la mediana muestral
mediana_muestral <- median(starcraft$apm)

# Calcular el intervalo de confianza al 90%
z_critico <- qnorm(0.95) # Valor crítico para un nivel de confianza del 90%
ic_90 <- c(
  mediana_muestral - z_critico * se_mediana,
  mediana_muestral + z_critico * se_mediana
)
ic_90_formateado <- sprintf("[%.3f, %.3f]", ic_90[1], ic_90[2])

str_glue("Un IC al 90% aproximado para la mediana poblacional es: \n{ic_90_formateado}")
# Fin Completar aquí
```

### Construcción de un IC al 90% basado en percentiles bootstrap

-   Realizad un histograma de las medianas bootstrap.

```{r}

# Completar aquí
ggplot(data.frame(medianas_bootstrap), aes(x = medianas_bootstrap)) +
  geom_histogram(
    bins = 50, 
    fill = "skyblue", 
    alpha = 0.7
  ) + 
  labs(x = "apm", y = "count")

# Fin Completar aquí
```

-   Deducid un intervalo de confianza al 90% para la mediana poblacional, usando la construcción por percentiles bootstrap.

```{r}
# Completar aquí

# Calcular el intervalo de confianza al 90% usando percentiles bootstrap
ic_percentiles <- quantile(medianas_bootstrap, probs = c(0.05, 0.95))

# Formatear el intervalo de confianza con 3 decimales
ic_percentiles_formateado <- sprintf("[%.3f, %.3f]", ic_percentiles[1], ic_percentiles[2])

# Mostrar el resultado
str_glue("Un IC al 90% basado en percentiles bootstrap para la mediana poblacional es: \n{ic_percentiles_formateado}")

# Fin Completar aquí
```