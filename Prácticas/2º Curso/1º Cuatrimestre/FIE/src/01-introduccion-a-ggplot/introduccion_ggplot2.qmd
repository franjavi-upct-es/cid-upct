---
title: "Introducción a ggplot2"
author:
  - name: Félix Belzunce
    affiliations: Universidad de Murcia
  - name:  María del Carmen Bueso, Pilar Sanmartín
    affiliations: Universidad Politécnica de Cartagena
format: html
editor: visual
title-block-banner: true
self-contained: true
---

## Preliminares

-   Creamos una carpeta `practicas` para nuestra asignatura
-   Creamos tres subcarpetas: `data`, `src` y `figures`.
-   En Rstudio, creamos el "proyecto" `fundamentos-inferencia`, asociado a la carpeta existente `practicas`.
-   En `src`, creamos la carpeta `00-introduccion-a-ggplot`, y descargamos el fichero `introduccion_ggplot2.qmd` desde el aula virtual
-   En `data`, descargamos el fichero `happy-ESS-2002-2020.csv` desde el aula virtual.
-   Abrimos el fichero `introduccion_ggplot2.qmd` que hemos descargado en `00-introduccion-a-ggplot`.

## ggplot2: un paquete muy potente para gráficas en R

Utilizaremos la librería adicional `ggplot2`, cuyo autor es Hadley Wickham.

`gplot2` es una librería gráfica que

-   Se rige por una "gramática".

-   Define componentes básicos que forman una frase.

-   inspirada por "Grammar of graphics" por L. Wilkinson.

-   Permite un gran rango de sofisticación: desde gráficas sencillas hasta gráficas muy complejas.

## Algunos recursos muy útiles

-   <https://ggplot2.tidyverse.org/index.html>

-   El libro ['ggplot2: Elegant Graphics for Data Analysis'](https://ggplot2-book.org/) por Hadley Wickham, el creador de *ggplot2*

-   El [sitio http://www.cookbook-r.com/Graphs/](http://www.cookbook-r.com/Graphs/) para el libro 'Cookbook for R'

## Primeros pasos

Consideramos el siguiente dataframe para ilustración:

```{r}
#| echo: true
df <- data.frame(
    col1 = c(3, 1, 5),
    col2 = c(2, 4, 6),
    col3 = c("a", "b", "c"),
    col4 = c("Hombre", "Mujer", "Hombre"),
    col5 = c(100, 300, 200)
)
```

Consta de tres filas, con cinco columnas: col1 hasta col5.

## La instrucción gráfica

Para producir una gráfica con ggplot2, la instrucción debe contener como mínimo dos componentes:

1.  el componente básico `ggplot`
2.  un `geom` (a menudo contendrá más de uno)

Por ejemplo:

```{r}
#| echo: true
#| warning: false
library(ggplot2)

ggplot(data = df, aes(x = col1, y = col2)) + geom_point()
```

o bien usando un "pipe":

```{r}
#| echo: true

df |> 
  ggplot(aes(x = col1, y = col2)) + 
  geom_point()

```

## El componente básico `ggplot`

En `ggplot`, se especifica en general como mínimo

-   el [dataframe]{style="color: green"} que contiene las variables que queremos representar (el argumento es `data=`)
-   algunos ["aesthetics"]{style="color: green"} básicos ...

## The "aesthetics": `aes` Un concepto fundamental

-   en el argumento `aes` especificamos [*todos los componentes de una gráfica que estén definidas por los valores de alguna columna del dataframe*]{style="color: red"}. Por ejemplo, con `x = ...` especificamos qué variable del data.frame sirve para constuir el eje OX.

-   Los "aesthetics" pueden especificar más que solo los ejes: forma, tamaño, transparencia(alfa), color, relleno, tipo de línea

## El componente básico `ggplot`, ejemplos con aesthetics

Representamos la columna `col3` en función de `col2`:

```{r}
#| echo: true
ggplot(data = df, aes(x = col1, y = col2)) + 
  geom_point()
```

## El componente básico `ggplot`, ejemplos con aesthetics

Usamos un color diferente según los valores que toma `col4`.

```{r}
#| echo: true
ggplot(data = df, aes(x = col1, y = col2, color = col4)) + 
  geom_point()

```

## El componente básico `ggplot`, ejemplos con aesthetics

Y además, una símbolo diferente según los valores de `col4`

```{r}
#| echo: true

ggplot(data = df, aes(x = col1, y = col2, color = col4, shape = col4)) + geom_point()

```

## El componente básico `ggplot`, ejemplos con aesthetics

Variando el tamaño de los puntos, según el valor de `col5`.

```{r}
#| echo: true

ggplot(data = df, aes(x = col1, y = col2, color = col4, size = col5)) + geom_point()

```

## Tengamos en cuenta

-   Todos los geoms heredan de los `data` y los `aes` definidos en el componente básico `ggplot`.
-   Pero podemos imponer unos nuevos a nivel de cada geom si nos interesa, con los mismos argumentos `data =` y `aes()`.
-   Si queremos fijar un valor concreto para el color, tamaño, forma etc..., lo hacemos en el `geom`, directamente, fuera del argumento `aes` (recordar que éste se usa solo cuando la característica estética depende de una columna en el data frame.)

Fijamos el tamaño de los símbolos a 5:

```{r}
#| echo: true

ggplot(data = df, aes(x = col1, y = col2, color = col4)) + geom_point(size = 5)

```

## Probando otros `geoms`

Para empezar, podemos guardar en un objeto llamado $p$ el componente básico.

```{r}
#| echo: true
p <- ggplot(data = df, aes(x = col1, y = col2))
```

y probamos con otros `geoms`:

```{r}
#| echo: true
p + geom_area()

p + geom_polygon()

p + geom_line()

p + geom_path()

p + geom_bar(stat='identity')

p + geom_tile()
```

## Para cambiar los rangos de valores representados en Ox y Oy

Usamos por ejemplo (hay otras opciones) la instrucciones [xlim](https://ggplot2.tidyverse.org/reference/lims.html) e [ylim](https://ggplot2.tidyverse.org/reference/lims.html)

```{r}
#| echo: true
#| eval: false

p + geom_point() + xlim(0, 8) + ylim(0, 9)

```

Si estamos ya decididos a que éstos sean los valores límites para los ejes, lo podemos incluir en la definición de `p`

```{r}
#| echo: true

p <- p + xlim(0, 8) + ylim(0, 9)

```

## Para cambiar ejes e incluir un título

Usamos la instrucción [labs](https://ggplot2.tidyverse.org/reference/labs.html).

```{r}
#| echo: true
p + geom_point() + labs(title = "Mi primera gráfica con ggplot", x = 'Primera columna', y = 'Segunda columna')
```

Todo es configurable en una gráfica con `ggplot2`, para cambiar fuente, tamaño, colores de las etiquetas de ejes, título, etc..., todo está centralizado en la instrucción [theme](https://ggplot2.tidyverse.org/reference/theme.html).

Por ejemplo

```{r}
#| echo: true

p + geom_point() + labs(title = "Mi primera gráfica con ggplot", x = 'Primera columna', y = 'Segunda columna') + theme(plot.title = element_text(lineheight = .8, face = 'bold'))
```

## Un ejemplo para ir practicando

Cada dos años, se realiza desde 2002 una gran encuesta llamada [European Social Survey](http://www.europeansocialsurvey.org/) cuyo objetivo es medir las actitudes, creencias y patrones de comportamiento de las poblaciones de más de 30 naciones.

Preguntan muchísimas cosas, una de las preguntas es

::: center
"Are you happy?"
:::

a la que pueden contestar desde 0 ("Extremely unhappy") a 10 ("Extremely happy").

## Los datos

En el fichero 'happy-ESS-2002-2020.csv' están los datos que usaremos y que, después de importar se presentan así:

```{r}
#| echo: true
#| warning: false

library(tidyverse)
happiness <- read_delim('../../data/happy-ESS-2002-2020.csv', 
                        delim = ";", col_names = TRUE, skip = 4)
head(happiness, n = 4)

```

-   La columna `mean` contiene la valoración media del pais (de 0 a 10).
-   La columna `sd` la desviación típica de las respuestas de este país.
-   `n` contiene el número de entrevistados

## Primera exploración para España

Queremos una gráfica de la evolución temporal de la percepción de la felicidad en España...

```{r}
#| echo: true
happiness |>
  filter(country == "Spain") |>
  ggplot(aes(x = year, y = mean)) +
  geom_line()
```

::: callout-warning
## Ejercicio

¿Podéis mejorarlo, añadiendo puntos también, cambiando los límites del eje Oy y cambiando el color de las líneas y de los puntos?
:::

```{r}
#| echo: true

# Filtramos los datos para España y creamos la gráfica de evolución temporal de la felicidad
happiness |>
  filter(country == "Spain") |>
  ggplot(aes(x = year, y = mean)) +
  # Añadimos una línea continua de color azul
  geom_line(color = 'blue') +
  # Añadimos puntos en los datos de cada año, también de color rojo
  geom_point(color = "red") +
  # Ajustamos los límites del eje Y entre 5 y 10
  ylim(5, 10) +
  # Aplicamos un tema minimalista para simplificar el diseño
  theme_minimal()
```

## Añadimos países

Queremos ahora comparar España a varios países del entorno, en concreto, con el \`\`Total'', Alemania, Francia y Reino Unido.

```{r}
#| echo: true
happiness |> 
  filter(country %in% c("Germany", "France", "Spain",
                        "Total", "United Kingdom")) |>
  ggplot(aes(x = year, y = mean)) +
  geom_line()
```

¿Era ésta la gráfica que esperábais?

## Añadimos países

Necesitamos especificar un "aesthetic"''" que esté asociado a country, para poder visualizar las diferencias entre los países.

```{r}
#| echo: true
happiness |> 
  filter(country %in% c("Germany", "France", "Spain",
                        "Total", "United Kingdom")) |>
  ggplot(aes(x = year, y = mean, colour = country)) +
  geom_line()
```

::: callout-warning
## Ejercicio

-   ¿Podríais añadir puntos, cambiar también el tipo de línea?(ver documentación de `geom_line` en [enlace documentación](https://ggplot2.tidyverse.org/reference/geom_path.html)
-   Guardamos el objeto gráfico correspondiente en `gghappiness`.
:::

```{r}
gghappiness <- happiness |> 
  filter(country %in% c("Germany", "France", "Spain",
                        "Total", "United Kingdom")) |>
  ggplot(aes(x = year, y = mean, colour = country)) +
  # Añadimos líneas con un tipo de línea discontinuo (dashed)
  geom_line(linetype = "dashed") +
  # Añadimos puntos para marcar los datos específicos de cada año
  geom_point() +
  # Aplicamos un tema minimalista para una visualización limpia
  theme_minimal()

gghappiness
```

## El comando `facet_grid`

El comando `facet_grid` permite crear una matriz de gráficas especificando una variable que defina las filas y otra que defina las columnas.\
Concretamente,

::: center
`facet_grid(X ~ Y)`
:::

::: smaller
crea una matriz de gráficas por grupos, donde cada fila agrupa a valores de `X` distintos, mientras que cada columna agrupa a valores de `Y` distintos.\
Si queremos una única fila o una única columna, usamos un punto para la variable correspondiente en `facet_grid`, por ejemplo, una fila y varias columnas:
:::

::: center
`facet_grid(. ~ Y)`
:::

## Ejercicio

::: callout-warning
## Ejercicio

Representar la evaluación anual de la percepción promedio de la felicidad en tres gráficas en una fila para España, Francia y Reino Unido.
:::

```{r}
#| echo: true
# Filtrar los datos para los países seleccionados y crear la gráfica
happiness |> 
  filter(country %in% c("Spain", "France", "United Kingdom")) |>
  ggplot(aes(x = year, y = mean)) +
  # Añadir líneas para mostrar la evolución de la felicidad
  geom_line(aes(colour = country)) +
  # Dividir la gráfica en una fila por país
  facet_grid(country ~ .) +
  # Aplicar un tema minimalista para mayor claridad
  theme_minimal()
```
