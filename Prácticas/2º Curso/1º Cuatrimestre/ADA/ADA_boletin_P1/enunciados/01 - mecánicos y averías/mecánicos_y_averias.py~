file_path = "C:\\Users\\pedro\\OneDrive\\Escritorio\\CID\\Curso_2\\Análisis y Diseño de Algoritmos\\Prácticas\\enunciados\\01 - mecánicos y averías\\tests\\T1\\701a.in"

import numpy as np

# Function to create matrices from a file
def create_matrix(file_path):
    '''
    Esta función lee el archivo y lo convierte en un array de tamaño N de matrices i,j de 0s y 1s.
    '''
    with open(file_path, 'r') as file:
        lines = file.readlines()  # Lectura de las lineas del archivo

    matrix = []
    current_line = 1

    while current_line < len(lines):  # Bucle que se ejecuta hasta que termine el archivo
        i, j = map(int, lines[current_line].split())  # Establece el tamaño de la siguiente submatriz
        current_line += 1

        sub_matrix = []
        for row in range(i):  # Este bucle va creando la submatriz
            sub_matrix.append(list(map(int, lines[current_line].split())))
            current_line += 1

        matrix.append(np.array(sub_matrix))  # Añade la submatriz a la matriz general

    return matrix

# Function to simulate the mechanic assignment problem
def voraz(caso):
    mecanicos, averias, matriz = caso
    asignaciones = [-1] * averias  # -1 indica que la avería no tiene asignación
    mecanicos_asignados = [False] * mecanicos  # Para saber si un mecánico ya está asignado
    
    total_averias_reparadas = 0
    
    # Intentamos asignar mecanicos a las averias
    for j in range(averias):
        for i in range(mecanicos):
            if matriz[i][j] == 1 and not mecanicos_asignados[i]:
                # Asignamos el mecánico i a la avería j
                asignaciones[j] = i + 1  # +1 porque los mecanicos comienzan en 1
                mecanicos_asignados[i] = True
                total_averias_reparadas += 1
                break
    
    # Devuelve el número total de averías reparadas y las asignaciones de mecánicos
    return total_averias_reparadas, asignaciones

# Procesar el archivo de entrada y aplicar la función voraz
def procesar_entrada_y_resolver(archivo_contenido):
    lineas = archivo_contenido.strip().splitlines()
    num_casos = int(lineas[0].strip())  # Número total de casos de prueba
    i = 1
    casos_de_prueba = []
    
    while i < len(lineas):
        mecanicos, averias = map(int, lineas[i].strip().split())
        i += 1
        matriz = []
        for _ in range(mecanicos):
            fila = list(map(int, lineas[i].strip().split()))
            matriz.append(fila)
            i += 1
        casos_de_prueba.append((mecanicos, averias, matriz))
    
    resultados = [voraz(caso) for caso in casos_de_prueba]
    salida = [str(num_casos)]
    for total_reparadas, asignaciones in resultados:
        salida.append(str(total_reparadas))
        asignaciones = [str(a if a != -1 else 0) for a in asignaciones]
        salida.append(' '.join(asignaciones))
    
    return '\n'.join(salida)
