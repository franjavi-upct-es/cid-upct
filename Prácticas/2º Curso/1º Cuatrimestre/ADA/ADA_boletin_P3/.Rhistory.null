library(reticulate)
use_condaenv("optim-2", conda="C:/ProgramData/anaconda3/Scripts/conda.exe", required = TRUE)
py_config()
reticulate::repl_python()
import matplotlib.pyplot as plt
import time
import random
def generar_casos_de_prueba(num_pruebas, m, C, alfabeto):
"""
Genera una lista de casos de prueba con los parámetros especificados.
:param num_pruebas: Número de pruebas a realizar.
:param m: Longitud fija de la subcadena.
:param C: Carácter a buscar.
:param alfabeto: Cadena de caracteres a utilizar para generar la cadena.
:return: Lista de tuplas (A, m, C).
"""
test_cases = []
for _ in range(num_pruebas):
n = random.randint(m, m * 10)  # La longitud de la cadena es al menos m
A = ''.join(random.choice(alfabeto) for _ in range(n))
test_cases.append((A, m, C))
return test_cases
# Parámetros especificados
alfabeto = "abcdefghijklmnopqrstuvwxyz"
C = 'c'  # Carácter a buscar
m = 100  # Tamaño de la subcadena fijo
num_pruebas = 1000  # Número de pruebas a realizar
# Generar los casos de prueba
test_cases = generar_casos_de_prueba(num_pruebas, m, C, alfabeto)
def resolver_directo(A, m, C):
"""
Encuentra la subcadena óptima utilizando un método directo
:param A: Cadena original (str)
:param m: Longitud de la cadena (int)
:param C: Carácter a buscar (str)
:return: tuple: Índice de inicio de la subcadena óptima y el número máximo de apariciones consecutivas.
"""
n = len(A)
max_consecutivos = 0
inicio_optimo = -1
# Recorrer todas las subcadenas de longitud m
for i in range(n - m + 1):
subcadena = A[i:i + m]
# Contar el número máximo de apariciones consecutivas de C en la subcadena
contador_actual = 0
max_actual = 0
for char in subcadena:
if char == C:
contador_actual += 1
if contador_actual > max_actual:
max_actual = contador_actual
else:
contador_actual = 0
# Actualizar la mejor solución encontrada
if max_actual > max_consecutivos:
max_consecutivos = max_actual
inicio_optimo = i
return inicio_optimo, max_consecutivos
def divide_y_venceras(A, m, C, l, r):
"""
Esquema recursivo del algoritmo divide y vencerás.
:param A: Cadena original (str)
:param m: Longitud de la subcadena (int)
:param C: Carácter a buscar (str)
:param l: Índice izquierdo del rango actual (int)
:param r: Índice derecho del rango actual (int)
:return: tuple: Índice de inicio de la subcadena óptima y el número máximo de apariciones consecutivas.
"""
if r - l + 1 <= m:
return resolver_directo(A[l:r + 1], m, C)
mid = (l + r) // 2
# Soluciones para las dos mitades
sol_izq = divide_y_venceras(A, m, C, l, mid)
sol_der = divide_y_venceras(A, m, C, mid + 1, r)
# Solución que cruza el centro
max_central_consecutivos = 0
inicio_central = -1
# Buscar subcadena que cruce el centro
for i in range(mid - m + 1, mid + 1):
if i < l or i + m - 1 > r:
continue
subcadena = A[i:i + m]
contador_actual = 0
max_actual = 0
for char in subcadena:
if char == C:
contador_actual += 1
max_actual = max(max_actual, contador_actual)
else:
contador_actual = 0
if max_actual > max_central_consecutivos:
max_central_consecutivos = max_actual
inicio_central = i
sol_central = (inicio_central, max_central_consecutivos)
return max(sol_izq, sol_der, sol_central, key=lambda x: x[1])
def comparar_algoritmos_tiempo_acumulado(test_cases):
tiempos_directo = []
tiempos_divide = []
tiempos_directo_acumulado = []
tiempos_divide_acumulado = []
iteraciones = []
tiempo_acumulado_directo = 0
tiempo_acumulado_divide = 0
iteration = 1
# Procesar cada caso y medir tiempos
for A, m, C in test_cases:
iteraciones.append(iteration)
# Medir tiempo para resolver_directo
start_time = time.time()
resolver_directo(A, m, C)
end_time = time.time()
tiempo_directo = end_time - start_time
tiempo_acumulado_directo += tiempo_directo
tiempos_directo.append(tiempo_directo)
tiempos_directo_acumulado.append(tiempo_acumulado_directo)
# Medir tiempo para divide_y_venceras
start_time = time.time()
divide_y_venceras(A, m, C, 0, len(A) - 1)
end_time = time.time()
tiempo_divide = end_time - start_time
tiempo_acumulado_divide += tiempo_divide
tiempos_divide.append(tiempo_divide)
tiempos_divide_acumulado.append(tiempo_acumulado_divide)
iteration += 1
# Graficar los tiempos acumulados de ambos algoritmos
plt.figure()
plt.plot(iteraciones, tiempos_directo_acumulado, color='blue', label='resolver_directo')
plt.plot(iteraciones, tiempos_divide_acumulado, color='red', label='divide_y_venceras')
plt.xlabel("Iteraciones (Casos)")
plt.ylabel("Tiempo Acumulado (s)")
plt.xticks([])
plt.title("Tiempo Acumulado de los Algoritmos por Iteración")
plt.legend()
plt.show()
comparar_algoritmos_tiempo_acumulado(test_cases)
def resolver_directo(A, m, C):
"""
Encuentra la subcadena óptima utilizando un método directo
:param A: Cadena original (str)
:param m: Longitud de la cadena (int)
:param C: Carácter a buscar (str)
:return: tuple: Índice de inicio de la subcadena óptima y el número máximo de apariciones consecutivas.
"""
n = len(A)
max_consecutivos = 0
inicio_optimo = -1
# Recorrer todas las subcadenas de longitud m
for i in range(n - m + 1):
subcadena = A[i:i + m]
# Contar el número máximo de apariciones consecutivas de C en la subcadena
contador_actual = 0
max_actual = 0
for char in subcadena:
if char == C:
contador_actual += 1
if contador_actual > max_actual:
max_actual = contador_actual
else:
contador_actual = 0
# Actualizar la mejor solución encontrada
if max_actual > max_consecutivos:
max_consecutivos = max_actual
inicio_optimo = i
return inicio_optimo, max_consecutivos
if __name__ == '__main__':
# Generar una cadena de ejemplo con el alfabeto
alfabeto = "abcdefghijklmnopqrstuvwxyz"
C = 'c'  # Carácter a buscar
m = 100  # Tamaño de la subcadena fijo
num_pruebas = 10 # Número de pruebas a realizar para comprobar que el código funciona
for i in range(num_pruebas):
print(f"\n -- Prueba {i + 1} --")
A = ''.join(random.choices(alfabeto, k=10000))  # Cadena aleatoria de longitud 10000
resultado = resolver_directo(A, m, C)
print(f"Índice de inicio: {resultado[0]} \nMáximo de apariciones consecutivas: {resultado[1]}")
def analyse_complexity_directo(test_cases):
overall_time = []
accumulated_time = 0
iteration = 1
for A, m, C in test_cases:
start_time = time.time()
inicio_optimo, max_consecutivos = resolver_directo(A, m, C)
end_time = time.time()
elapsed_time = end_time - start_time
accumulated_time += elapsed_time
overall_time.append(accumulated_time)
iteration += 1
if overall_time:
plt.figure()
plt.plot(range(1, iteration), overall_time, color='blue')
plt.xlabel("Iteraciones (Casos)")
plt.ylabel("Tiempo Acumulado (s)")
plt.xticks([])
plt.title("Algoritmo resolver_directo")
plt.show()
else:
print("No se procesaron casos.")
analyse_complexity_directo(test_cases)
def divide_y_venceras(A, m, C, l, r):
"""
Esquema recursivo del algoritmo divide y vencerás.
:param A: Cadena original (str)
:param m: Longitud de la subcadena (int)
:param C: Carácter a buscar (str)
:param l: Índice izquierdo del rango actual (int)
:param r: Índice derecho del rango actual (int)
:return: tuple: Índice de inicio de la subcadena óptima y el número máximo de apariciones consecutivas.
"""
if r - l + 1 <= m:
return resolver_directo(A[l:r + 1], m, C)
mid = (l + r) // 2
# Soluciones para las dos mitades
sol_izq = divide_y_venceras(A, m, C, l, mid)
sol_der = divide_y_venceras(A, m, C, mid + 1, r)
# Solución que cruza el centro
max_central_consecutivos = 0
inicio_central = -1
# Optimización de la solución central
max_izq = 0
contador = 0
for i in range(mid, l - 1, -1):
if A[i] == C:
contador += 1
max_izq = max(max_izq, contador)
else:
break
max_der = 0
contador = 0
for i in range(mid + 1, r + 1):
if A[i] == C:
contador += 1
max_der = max(max_der, contador)
else:
break
sol_central = (mid - max_izq + 1, max_izq + max_der)
return max(sol_izq, sol_der, sol_central, key=lambda x: x[1])
if __name__ == '__main__':
# Generar una cadena de ejemplo con el alfabeto
alfabeto = "abcdefghijklmnopqrstuvwxyz"
C = 'c'  # Carácter a buscar
m = 100  # Tamaño de la subcadena fijo
num_pruebas = 10 # Número de pruebas a realizar para comprobar que el código funciona
for i in range(num_pruebas):
print(f"\n -- Prueba {i + 1} --")
A = ''.join(random.choices(alfabeto, k=10000))  # Cadena aleatoria de longitud 10000
resultado = divide_y_venceras(A, m, C, 0, len(A) - 1)
print(f"Índice de inicio: {resultado[0]} \nMáximo de apariciones consecutivas: {resultado[1]}")
def analyse_complexity_divide_y_venceras(test_cases):
overall_time = []
accumulated_time = 0
iteration = 1
for A, m, C in test_cases:
start_time = time.time()
inicio_optimo, max_consecutivos = divide_y_venceras(A, m, C, 0, len(A) - 1)
end_time = time.time()
elapsed_time = end_time - start_time
accumulated_time += elapsed_time
overall_time.append(accumulated_time)
iteration += 1
if overall_time:
plt.figure()
plt.plot(range(1, iteration), overall_time, color='red')
plt.xlabel("Iteraciones (Casos)")
plt.ylabel("Tiempo Acumulado (s)")
plt.xticks([])
plt.title("Algoritmo divide_y_venceras")
plt.show()
else:
print("No se procesaron casos.")
analyse_complexity_divide_y_venceras(test_cases)
def comparar_algoritmos_tiempo_acumulado(test_cases):
tiempos_directo = []
tiempos_divide = []
tiempos_directo_acumulado = []
tiempos_divide_acumulado = []
iteraciones = []
tiempo_acumulado_directo = 0
tiempo_acumulado_divide = 0
iteration = 1
# Procesar cada caso y medir tiempos
for A, m, C in test_cases:
iteraciones.append(iteration)
# Medir tiempo para resolver_directo
start_time = time.time()
resolver_directo(A, m, C)
end_time = time.time()
tiempo_directo = end_time - start_time
tiempo_acumulado_directo += tiempo_directo
tiempos_directo.append(tiempo_directo)
tiempos_directo_acumulado.append(tiempo_acumulado_directo)
# Medir tiempo para divide_y_venceras
start_time = time.time()
divide_y_venceras(A, m, C, 0, len(A) - 1)
end_time = time.time()
tiempo_divide = end_time - start_time
tiempo_acumulado_divide += tiempo_divide
tiempos_divide.append(tiempo_divide)
tiempos_divide_acumulado.append(tiempo_acumulado_divide)
iteration += 1
# Graficar los tiempos acumulados de ambos algoritmos
plt.figure()
plt.plot(iteraciones, tiempos_directo_acumulado, color='blue', label='resolver_directo')
plt.plot(iteraciones, tiempos_divide_acumulado, color='red', label='divide_y_venceras')
plt.xlabel("Iteraciones (Casos)")
plt.ylabel("Tiempo Acumulado (s)")
plt.xticks([])
plt.title("Tiempo Acumulado de los Algoritmos por Iteración")
plt.legend()
plt.show()
comparar_algoritmos_tiempo_acumulado(test_cases)
quit()
quit
